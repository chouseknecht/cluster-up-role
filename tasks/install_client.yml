- name: Get the Mac asset 
  include: get_mac_asset.yml
  with_items: "{{ assets.json }}"
  when: assets is defined and ansible_os_family == 'Darwin'

- name: Get the Linux asset
  include: get_linux_asset.yml
  with_items: "{{ assets.json }}"
  when: "assets is defined and ansible_os_family in ['RedHat', 'Debian']"

- name: Should have an asset_name
  assert:
    that: asset_name is defined

- name: Create a temp dir
  command: mktemp -d -t ansible.XXXXXXXXXX
  register: temp_output

- name: Show temp dir
  debug: msg="Temp dir - {{ temp_output.stdout }}"

- name: Show the asset name
  debug: msg="Asset name = {{ asset_name }}"

- name: Download the asset
  get_url:
    url: "{{ asset_url }}"
    dest: "{{ temp_output.stdout }}/{{ asset_name }}" 

- name: Unzip the archive
  command: "unzip {{ asset_name }}" 
  args:
    chdir: "{{ temp_output.stdout }}"
  when: "'zip' in asset_name"

- name: Untar the archive
  command: "tar -xvzf {{ asset_name }}" 
  args:
    chdir: "{{ temp_output.stdout }}"
  when: "'tar.gz' in asset_name"

- name: Check if 'oc' exists
  stat:
    path: "{{ temp_output.stdout }}/oc"
  register: oc

- name: Copy 'oc' to the requested directory 
  copy:
    src: "{{ temp_output.stdout }}/oc" 
    dest: "{{ openshift_client_dest }}/oc"  
    mode: 0775 
  become: yes
  become_user: root 
  when: oc.stat.exists

- set_fact: 
    archive_path: "{{ asset_name | regex_replace('\\.(tar\\.gz|\\zip)', '') }}/" 
  when: "not oc.stat.exists and 'tar.gz' in asset_name"

- set_fact: 
    archive_path: "" 
  when: "not oc.stat.exists and 'zip' in asset_name"

- name: Move the oc executable to the requested directory 
  copy:
    src: "{{ temp_output.stdout }}/{{ archive_path }}/oc" 
    dest: "{{ openshift_client_dest }}/oc"  
    mode: 0775 
  become: yes
  become_user: root 
  when: not oc.stat.exists

- name: Remove the temp directory
  file:
    path: "{{ temp_output.stdout }}"
    state: absent
